//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dashboard.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Category : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BrandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ParentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Dashboard.ServiceReference.Product> ProductsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WarrantyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Brand {
            get {
                return this.BrandField;
            }
            set {
                if ((object.ReferenceEquals(this.BrandField, value) != true)) {
                    this.BrandField = value;
                    this.RaisePropertyChanged("Brand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Level {
            get {
                return this.LevelField;
            }
            set {
                if ((this.LevelField.Equals(value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ParentId {
            get {
                return this.ParentIdField;
            }
            set {
                if ((this.ParentIdField.Equals(value) != true)) {
                    this.ParentIdField = value;
                    this.RaisePropertyChanged("ParentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Dashboard.ServiceReference.Product> Products {
            get {
                return this.ProductsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductsField, value) != true)) {
                    this.ProductsField = value;
                    this.RaisePropertyChanged("Products");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Warranty {
            get {
                return this.WarrantyField;
            }
            set {
                if ((object.ReferenceEquals(this.WarrantyField, value) != true)) {
                    this.WarrantyField = value;
                    this.RaisePropertyChanged("Warranty");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Dashboard.ServiceReference.Category CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Dashboard.ServiceReference.Feature> FeatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Dashboard.ServiceReference.Image> ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOfferField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDayField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Dashboard.ServiceReference.Category Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDay {
            get {
                return this.EndDayField;
            }
            set {
                if ((this.EndDayField.Equals(value) != true)) {
                    this.EndDayField = value;
                    this.RaisePropertyChanged("EndDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Dashboard.ServiceReference.Feature> Feature {
            get {
                return this.FeatureField;
            }
            set {
                if ((object.ReferenceEquals(this.FeatureField, value) != true)) {
                    this.FeatureField = value;
                    this.RaisePropertyChanged("Feature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Dashboard.ServiceReference.Image> Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOffer {
            get {
                return this.IsOfferField;
            }
            set {
                if ((this.IsOfferField.Equals(value) != true)) {
                    this.IsOfferField = value;
                    this.RaisePropertyChanged("IsOffer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Percent {
            get {
                return this.PercentField;
            }
            set {
                if ((this.PercentField.Equals(value) != true)) {
                    this.PercentField = value;
                    this.RaisePropertyChanged("Percent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDay {
            get {
                return this.StartDayField;
            }
            set {
                if ((this.StartDayField.Equals(value) != true)) {
                    this.StartDayField = value;
                    this.RaisePropertyChanged("StartDay");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Feature", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Feature : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Dashboard.ServiceReference.Product ProductField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Dashboard.ServiceReference.Product Product {
            get {
                return this.ProductField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductField, value) != true)) {
                    this.ProductField = value;
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((this.ProductIDField.Equals(value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Image", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Image : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Dashboard.ServiceReference.Product ProductsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMain {
            get {
                return this.IsMainField;
            }
            set {
                if ((this.IsMainField.Equals(value) != true)) {
                    this.IsMainField = value;
                    this.RaisePropertyChanged("IsMain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductId {
            get {
                return this.ProductIdField;
            }
            set {
                if ((this.ProductIdField.Equals(value) != true)) {
                    this.ProductIdField = value;
                    this.RaisePropertyChanged("ProductId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Dashboard.ServiceReference.Product Products {
            get {
                return this.ProductsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductsField, value) != true)) {
                    this.ProductsField = value;
                    this.RaisePropertyChanged("Products");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Order : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameCustomerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime OrderDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime OrderDoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Dashboard.ServiceReference.OrderProduct> OrderProductField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderStateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Dashboard.ServiceReference.OrderStatus OrderStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaymentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mail {
            get {
                return this.MailField;
            }
            set {
                if ((object.ReferenceEquals(this.MailField, value) != true)) {
                    this.MailField = value;
                    this.RaisePropertyChanged("Mail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameCustomer {
            get {
                return this.NameCustomerField;
            }
            set {
                if ((object.ReferenceEquals(this.NameCustomerField, value) != true)) {
                    this.NameCustomerField = value;
                    this.RaisePropertyChanged("NameCustomer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime OrderDate {
            get {
                return this.OrderDateField;
            }
            set {
                if ((this.OrderDateField.Equals(value) != true)) {
                    this.OrderDateField = value;
                    this.RaisePropertyChanged("OrderDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime OrderDone {
            get {
                return this.OrderDoneField;
            }
            set {
                if ((this.OrderDoneField.Equals(value) != true)) {
                    this.OrderDoneField = value;
                    this.RaisePropertyChanged("OrderDone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Dashboard.ServiceReference.OrderProduct> OrderProduct {
            get {
                return this.OrderProductField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderProductField, value) != true)) {
                    this.OrderProductField = value;
                    this.RaisePropertyChanged("OrderProduct");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderStateId {
            get {
                return this.OrderStateIdField;
            }
            set {
                if ((this.OrderStateIdField.Equals(value) != true)) {
                    this.OrderStateIdField = value;
                    this.RaisePropertyChanged("OrderStateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Dashboard.ServiceReference.OrderStatus OrderStatus {
            get {
                return this.OrderStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderStatusField, value) != true)) {
                    this.OrderStatusField = value;
                    this.RaisePropertyChanged("OrderStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Payment {
            get {
                return this.PaymentField;
            }
            set {
                if ((object.ReferenceEquals(this.PaymentField, value) != true)) {
                    this.PaymentField = value;
                    this.RaisePropertyChanged("Payment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderStatus", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class OrderStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Dashboard.ServiceReference.Order> OrderField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Name {
            get {
                return this.NameField;
            }
            set {
                if ((this.NameField.Equals(value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Dashboard.ServiceReference.Order> Order {
            get {
                return this.OrderField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderField, value) != true)) {
                    this.OrderField = value;
                    this.RaisePropertyChanged("Order");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderProduct", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class OrderProduct : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameProductField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderProductIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameProduct {
            get {
                return this.NameProductField;
            }
            set {
                if ((object.ReferenceEquals(this.NameProductField, value) != true)) {
                    this.NameProductField = value;
                    this.RaisePropertyChanged("NameProduct");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderId {
            get {
                return this.OrderIdField;
            }
            set {
                if ((this.OrderIdField.Equals(value) != true)) {
                    this.OrderIdField = value;
                    this.RaisePropertyChanged("OrderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderProductId {
            get {
                return this.OrderProductIdField;
            }
            set {
                if ((this.OrderProductIdField.Equals(value) != true)) {
                    this.OrderProductIdField = value;
                    this.RaisePropertyChanged("OrderProductId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Banner", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Banner : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageUrl {
            get {
                return this.ImageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageUrlField, value) != true)) {
                    this.ImageUrlField = value;
                    this.RaisePropertyChanged("ImageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IContract")]
    public interface IContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetAllCategories", ReplyAction="http://tempuri.org/IContract/GetAllCategoriesResponse")]
        System.Collections.Generic.List<Dashboard.ServiceReference.Category> GetAllCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetAllCategories", ReplyAction="http://tempuri.org/IContract/GetAllCategoriesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Category>> GetAllCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetAllCategoryVisible", ReplyAction="http://tempuri.org/IContract/GetAllCategoryVisibleResponse")]
        System.Collections.Generic.List<Dashboard.ServiceReference.Category> GetAllCategoryVisible();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetAllCategoryVisible", ReplyAction="http://tempuri.org/IContract/GetAllCategoryVisibleResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Category>> GetAllCategoryVisibleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetCategoryById", ReplyAction="http://tempuri.org/IContract/GetCategoryByIdResponse")]
        Dashboard.ServiceReference.Category GetCategoryById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetCategoryById", ReplyAction="http://tempuri.org/IContract/GetCategoryByIdResponse")]
        System.Threading.Tasks.Task<Dashboard.ServiceReference.Category> GetCategoryByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/UpdateCategory", ReplyAction="http://tempuri.org/IContract/UpdateCategoryResponse")]
        void UpdateCategory(Dashboard.ServiceReference.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/UpdateCategory", ReplyAction="http://tempuri.org/IContract/UpdateCategoryResponse")]
        System.Threading.Tasks.Task UpdateCategoryAsync(Dashboard.ServiceReference.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/AddCategory", ReplyAction="http://tempuri.org/IContract/AddCategoryResponse")]
        void AddCategory(Dashboard.ServiceReference.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/AddCategory", ReplyAction="http://tempuri.org/IContract/AddCategoryResponse")]
        System.Threading.Tasks.Task AddCategoryAsync(Dashboard.ServiceReference.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/DeleteCategory", ReplyAction="http://tempuri.org/IContract/DeleteCategoryResponse")]
        void DeleteCategory(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/DeleteCategory", ReplyAction="http://tempuri.org/IContract/DeleteCategoryResponse")]
        System.Threading.Tasks.Task DeleteCategoryAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetAllProducts", ReplyAction="http://tempuri.org/IContract/GetAllProductsResponse")]
        System.Collections.Generic.List<Dashboard.ServiceReference.Product> GetAllProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetAllProducts", ReplyAction="http://tempuri.org/IContract/GetAllProductsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Product>> GetAllProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetAllProductVisible", ReplyAction="http://tempuri.org/IContract/GetAllProductVisibleResponse")]
        System.Collections.Generic.List<Dashboard.ServiceReference.Product> GetAllProductVisible();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetAllProductVisible", ReplyAction="http://tempuri.org/IContract/GetAllProductVisibleResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Product>> GetAllProductVisibleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetProductById", ReplyAction="http://tempuri.org/IContract/GetProductByIdResponse")]
        Dashboard.ServiceReference.Product GetProductById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetProductById", ReplyAction="http://tempuri.org/IContract/GetProductByIdResponse")]
        System.Threading.Tasks.Task<Dashboard.ServiceReference.Product> GetProductByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetProductByCategory", ReplyAction="http://tempuri.org/IContract/GetProductByCategoryResponse")]
        System.Collections.Generic.List<Dashboard.ServiceReference.Product> GetProductByCategory(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetProductByCategory", ReplyAction="http://tempuri.org/IContract/GetProductByCategoryResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Product>> GetProductByCategoryAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetProductByName", ReplyAction="http://tempuri.org/IContract/GetProductByNameResponse")]
        System.Collections.Generic.List<Dashboard.ServiceReference.Product> GetProductByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetProductByName", ReplyAction="http://tempuri.org/IContract/GetProductByNameResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Product>> GetProductByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetProductBywithOffer", ReplyAction="http://tempuri.org/IContract/GetProductBywithOfferResponse")]
        System.Collections.Generic.List<Dashboard.ServiceReference.Product> GetProductBywithOffer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetProductBywithOffer", ReplyAction="http://tempuri.org/IContract/GetProductBywithOfferResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Product>> GetProductBywithOfferAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/UpdateProduct", ReplyAction="http://tempuri.org/IContract/UpdateProductResponse")]
        void UpdateProduct(Dashboard.ServiceReference.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/UpdateProduct", ReplyAction="http://tempuri.org/IContract/UpdateProductResponse")]
        System.Threading.Tasks.Task UpdateProductAsync(Dashboard.ServiceReference.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/AddProduct", ReplyAction="http://tempuri.org/IContract/AddProductResponse")]
        int AddProduct(Dashboard.ServiceReference.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/AddProduct", ReplyAction="http://tempuri.org/IContract/AddProductResponse")]
        System.Threading.Tasks.Task<int> AddProductAsync(Dashboard.ServiceReference.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/DeleteProduct", ReplyAction="http://tempuri.org/IContract/DeleteProductResponse")]
        void DeleteProduct(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/DeleteProduct", ReplyAction="http://tempuri.org/IContract/DeleteProductResponse")]
        System.Threading.Tasks.Task DeleteProductAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetProductLastOffers", ReplyAction="http://tempuri.org/IContract/GetProductLastOffersResponse")]
        System.Collections.Generic.List<Dashboard.ServiceReference.Product> GetProductLastOffers(System.Nullable<int> count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetProductLastOffers", ReplyAction="http://tempuri.org/IContract/GetProductLastOffersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Product>> GetProductLastOffersAsync(System.Nullable<int> count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetProductLastAdded", ReplyAction="http://tempuri.org/IContract/GetProductLastAddedResponse")]
        System.Collections.Generic.List<Dashboard.ServiceReference.Product> GetProductLastAdded(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetProductLastAdded", ReplyAction="http://tempuri.org/IContract/GetProductLastAddedResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Product>> GetProductLastAddedAsync(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetAllOrders", ReplyAction="http://tempuri.org/IContract/GetAllOrdersResponse")]
        System.Collections.Generic.List<Dashboard.ServiceReference.Order> GetAllOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetAllOrders", ReplyAction="http://tempuri.org/IContract/GetAllOrdersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Order>> GetAllOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetAllOrderByState", ReplyAction="http://tempuri.org/IContract/GetAllOrderByStateResponse")]
        System.Collections.Generic.List<Dashboard.ServiceReference.Order> GetAllOrderByState(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetAllOrderByState", ReplyAction="http://tempuri.org/IContract/GetAllOrderByStateResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Order>> GetAllOrderByStateAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/UpdateOrder", ReplyAction="http://tempuri.org/IContract/UpdateOrderResponse")]
        void UpdateOrder(Dashboard.ServiceReference.Order Order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/UpdateOrder", ReplyAction="http://tempuri.org/IContract/UpdateOrderResponse")]
        System.Threading.Tasks.Task UpdateOrderAsync(Dashboard.ServiceReference.Order Order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetOrderById", ReplyAction="http://tempuri.org/IContract/GetOrderByIdResponse")]
        Dashboard.ServiceReference.Order GetOrderById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetOrderById", ReplyAction="http://tempuri.org/IContract/GetOrderByIdResponse")]
        System.Threading.Tasks.Task<Dashboard.ServiceReference.Order> GetOrderByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetOrderByDate", ReplyAction="http://tempuri.org/IContract/GetOrderByDateResponse")]
        System.Collections.Generic.List<Dashboard.ServiceReference.Order> GetOrderByDate(System.DateTime OrdenDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetOrderByDate", ReplyAction="http://tempuri.org/IContract/GetOrderByDateResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Order>> GetOrderByDateAsync(System.DateTime OrdenDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetOrderByDateDone", ReplyAction="http://tempuri.org/IContract/GetOrderByDateDoneResponse")]
        System.Collections.Generic.List<Dashboard.ServiceReference.Order> GetOrderByDateDone(System.DateTime OrdenDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetOrderByDateDone", ReplyAction="http://tempuri.org/IContract/GetOrderByDateDoneResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Order>> GetOrderByDateDoneAsync(System.DateTime OrdenDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/PlaceOrder", ReplyAction="http://tempuri.org/IContract/PlaceOrderResponse")]
        void PlaceOrder(Dashboard.ServiceReference.Order Order, System.Collections.Generic.List<Dashboard.ServiceReference.OrderProduct> products);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/PlaceOrder", ReplyAction="http://tempuri.org/IContract/PlaceOrderResponse")]
        System.Threading.Tasks.Task PlaceOrderAsync(Dashboard.ServiceReference.Order Order, System.Collections.Generic.List<Dashboard.ServiceReference.OrderProduct> products);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetAllBanner", ReplyAction="http://tempuri.org/IContract/GetAllBannerResponse")]
        System.Collections.Generic.List<Dashboard.ServiceReference.Banner> GetAllBanner();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetAllBanner", ReplyAction="http://tempuri.org/IContract/GetAllBannerResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Banner>> GetAllBannerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetBannerById", ReplyAction="http://tempuri.org/IContract/GetBannerByIdResponse")]
        Dashboard.ServiceReference.Banner GetBannerById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetBannerById", ReplyAction="http://tempuri.org/IContract/GetBannerByIdResponse")]
        System.Threading.Tasks.Task<Dashboard.ServiceReference.Banner> GetBannerByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/UpdateBanner", ReplyAction="http://tempuri.org/IContract/UpdateBannerResponse")]
        void UpdateBanner(Dashboard.ServiceReference.Banner banner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/UpdateBanner", ReplyAction="http://tempuri.org/IContract/UpdateBannerResponse")]
        System.Threading.Tasks.Task UpdateBannerAsync(Dashboard.ServiceReference.Banner banner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/AddBanner", ReplyAction="http://tempuri.org/IContract/AddBannerResponse")]
        void AddBanner(Dashboard.ServiceReference.Banner banner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/AddBanner", ReplyAction="http://tempuri.org/IContract/AddBannerResponse")]
        System.Threading.Tasks.Task AddBannerAsync(Dashboard.ServiceReference.Banner banner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/DeleteBanner", ReplyAction="http://tempuri.org/IContract/DeleteBannerResponse")]
        void DeleteBanner(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/DeleteBanner", ReplyAction="http://tempuri.org/IContract/DeleteBannerResponse")]
        System.Threading.Tasks.Task DeleteBannerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetImageByProductId", ReplyAction="http://tempuri.org/IContract/GetImageByProductIdResponse")]
        System.Collections.Generic.List<Dashboard.ServiceReference.Image> GetImageByProductId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetImageByProductId", ReplyAction="http://tempuri.org/IContract/GetImageByProductIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Image>> GetImageByProductIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetImageById", ReplyAction="http://tempuri.org/IContract/GetImageByIdResponse")]
        Dashboard.ServiceReference.Image GetImageById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetImageById", ReplyAction="http://tempuri.org/IContract/GetImageByIdResponse")]
        System.Threading.Tasks.Task<Dashboard.ServiceReference.Image> GetImageByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/DeleteImage", ReplyAction="http://tempuri.org/IContract/DeleteImageResponse")]
        void DeleteImage(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/DeleteImage", ReplyAction="http://tempuri.org/IContract/DeleteImageResponse")]
        System.Threading.Tasks.Task DeleteImageAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/AddImageRange", ReplyAction="http://tempuri.org/IContract/AddImageRangeResponse")]
        void AddImageRange(System.Collections.Generic.List<Dashboard.ServiceReference.Image> image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/AddImageRange", ReplyAction="http://tempuri.org/IContract/AddImageRangeResponse")]
        System.Threading.Tasks.Task AddImageRangeAsync(System.Collections.Generic.List<Dashboard.ServiceReference.Image> image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetFeatureByProductId", ReplyAction="http://tempuri.org/IContract/GetFeatureByProductIdResponse")]
        System.Collections.Generic.List<Dashboard.ServiceReference.Feature> GetFeatureByProductId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/GetFeatureByProductId", ReplyAction="http://tempuri.org/IContract/GetFeatureByProductIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Feature>> GetFeatureByProductIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContractChannel : Dashboard.ServiceReference.IContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractClient : System.ServiceModel.ClientBase<Dashboard.ServiceReference.IContract>, Dashboard.ServiceReference.IContract {
        
        public ContractClient() {
        }
        
        public ContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<Dashboard.ServiceReference.Category> GetAllCategories() {
            return base.Channel.GetAllCategories();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Category>> GetAllCategoriesAsync() {
            return base.Channel.GetAllCategoriesAsync();
        }
        
        public System.Collections.Generic.List<Dashboard.ServiceReference.Category> GetAllCategoryVisible() {
            return base.Channel.GetAllCategoryVisible();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Category>> GetAllCategoryVisibleAsync() {
            return base.Channel.GetAllCategoryVisibleAsync();
        }
        
        public Dashboard.ServiceReference.Category GetCategoryById(int id) {
            return base.Channel.GetCategoryById(id);
        }
        
        public System.Threading.Tasks.Task<Dashboard.ServiceReference.Category> GetCategoryByIdAsync(int id) {
            return base.Channel.GetCategoryByIdAsync(id);
        }
        
        public void UpdateCategory(Dashboard.ServiceReference.Category category) {
            base.Channel.UpdateCategory(category);
        }
        
        public System.Threading.Tasks.Task UpdateCategoryAsync(Dashboard.ServiceReference.Category category) {
            return base.Channel.UpdateCategoryAsync(category);
        }
        
        public void AddCategory(Dashboard.ServiceReference.Category category) {
            base.Channel.AddCategory(category);
        }
        
        public System.Threading.Tasks.Task AddCategoryAsync(Dashboard.ServiceReference.Category category) {
            return base.Channel.AddCategoryAsync(category);
        }
        
        public void DeleteCategory(int id) {
            base.Channel.DeleteCategory(id);
        }
        
        public System.Threading.Tasks.Task DeleteCategoryAsync(int id) {
            return base.Channel.DeleteCategoryAsync(id);
        }
        
        public System.Collections.Generic.List<Dashboard.ServiceReference.Product> GetAllProducts() {
            return base.Channel.GetAllProducts();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Product>> GetAllProductsAsync() {
            return base.Channel.GetAllProductsAsync();
        }
        
        public System.Collections.Generic.List<Dashboard.ServiceReference.Product> GetAllProductVisible() {
            return base.Channel.GetAllProductVisible();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Product>> GetAllProductVisibleAsync() {
            return base.Channel.GetAllProductVisibleAsync();
        }
        
        public Dashboard.ServiceReference.Product GetProductById(int id) {
            return base.Channel.GetProductById(id);
        }
        
        public System.Threading.Tasks.Task<Dashboard.ServiceReference.Product> GetProductByIdAsync(int id) {
            return base.Channel.GetProductByIdAsync(id);
        }
        
        public System.Collections.Generic.List<Dashboard.ServiceReference.Product> GetProductByCategory(int id) {
            return base.Channel.GetProductByCategory(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Product>> GetProductByCategoryAsync(int id) {
            return base.Channel.GetProductByCategoryAsync(id);
        }
        
        public System.Collections.Generic.List<Dashboard.ServiceReference.Product> GetProductByName(string name) {
            return base.Channel.GetProductByName(name);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Product>> GetProductByNameAsync(string name) {
            return base.Channel.GetProductByNameAsync(name);
        }
        
        public System.Collections.Generic.List<Dashboard.ServiceReference.Product> GetProductBywithOffer() {
            return base.Channel.GetProductBywithOffer();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Product>> GetProductBywithOfferAsync() {
            return base.Channel.GetProductBywithOfferAsync();
        }
        
        public void UpdateProduct(Dashboard.ServiceReference.Product Product) {
            base.Channel.UpdateProduct(Product);
        }
        
        public System.Threading.Tasks.Task UpdateProductAsync(Dashboard.ServiceReference.Product Product) {
            return base.Channel.UpdateProductAsync(Product);
        }
        
        public int AddProduct(Dashboard.ServiceReference.Product Product) {
            return base.Channel.AddProduct(Product);
        }
        
        public System.Threading.Tasks.Task<int> AddProductAsync(Dashboard.ServiceReference.Product Product) {
            return base.Channel.AddProductAsync(Product);
        }
        
        public void DeleteProduct(int id) {
            base.Channel.DeleteProduct(id);
        }
        
        public System.Threading.Tasks.Task DeleteProductAsync(int id) {
            return base.Channel.DeleteProductAsync(id);
        }
        
        public System.Collections.Generic.List<Dashboard.ServiceReference.Product> GetProductLastOffers(System.Nullable<int> count) {
            return base.Channel.GetProductLastOffers(count);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Product>> GetProductLastOffersAsync(System.Nullable<int> count) {
            return base.Channel.GetProductLastOffersAsync(count);
        }
        
        public System.Collections.Generic.List<Dashboard.ServiceReference.Product> GetProductLastAdded(int count) {
            return base.Channel.GetProductLastAdded(count);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Product>> GetProductLastAddedAsync(int count) {
            return base.Channel.GetProductLastAddedAsync(count);
        }
        
        public System.Collections.Generic.List<Dashboard.ServiceReference.Order> GetAllOrders() {
            return base.Channel.GetAllOrders();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Order>> GetAllOrdersAsync() {
            return base.Channel.GetAllOrdersAsync();
        }
        
        public System.Collections.Generic.List<Dashboard.ServiceReference.Order> GetAllOrderByState(int id) {
            return base.Channel.GetAllOrderByState(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Order>> GetAllOrderByStateAsync(int id) {
            return base.Channel.GetAllOrderByStateAsync(id);
        }
        
        public void UpdateOrder(Dashboard.ServiceReference.Order Order) {
            base.Channel.UpdateOrder(Order);
        }
        
        public System.Threading.Tasks.Task UpdateOrderAsync(Dashboard.ServiceReference.Order Order) {
            return base.Channel.UpdateOrderAsync(Order);
        }
        
        public Dashboard.ServiceReference.Order GetOrderById(int id) {
            return base.Channel.GetOrderById(id);
        }
        
        public System.Threading.Tasks.Task<Dashboard.ServiceReference.Order> GetOrderByIdAsync(int id) {
            return base.Channel.GetOrderByIdAsync(id);
        }
        
        public System.Collections.Generic.List<Dashboard.ServiceReference.Order> GetOrderByDate(System.DateTime OrdenDate) {
            return base.Channel.GetOrderByDate(OrdenDate);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Order>> GetOrderByDateAsync(System.DateTime OrdenDate) {
            return base.Channel.GetOrderByDateAsync(OrdenDate);
        }
        
        public System.Collections.Generic.List<Dashboard.ServiceReference.Order> GetOrderByDateDone(System.DateTime OrdenDate) {
            return base.Channel.GetOrderByDateDone(OrdenDate);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Order>> GetOrderByDateDoneAsync(System.DateTime OrdenDate) {
            return base.Channel.GetOrderByDateDoneAsync(OrdenDate);
        }
        
        public void PlaceOrder(Dashboard.ServiceReference.Order Order, System.Collections.Generic.List<Dashboard.ServiceReference.OrderProduct> products) {
            base.Channel.PlaceOrder(Order, products);
        }
        
        public System.Threading.Tasks.Task PlaceOrderAsync(Dashboard.ServiceReference.Order Order, System.Collections.Generic.List<Dashboard.ServiceReference.OrderProduct> products) {
            return base.Channel.PlaceOrderAsync(Order, products);
        }
        
        public System.Collections.Generic.List<Dashboard.ServiceReference.Banner> GetAllBanner() {
            return base.Channel.GetAllBanner();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Banner>> GetAllBannerAsync() {
            return base.Channel.GetAllBannerAsync();
        }
        
        public Dashboard.ServiceReference.Banner GetBannerById(int id) {
            return base.Channel.GetBannerById(id);
        }
        
        public System.Threading.Tasks.Task<Dashboard.ServiceReference.Banner> GetBannerByIdAsync(int id) {
            return base.Channel.GetBannerByIdAsync(id);
        }
        
        public void UpdateBanner(Dashboard.ServiceReference.Banner banner) {
            base.Channel.UpdateBanner(banner);
        }
        
        public System.Threading.Tasks.Task UpdateBannerAsync(Dashboard.ServiceReference.Banner banner) {
            return base.Channel.UpdateBannerAsync(banner);
        }
        
        public void AddBanner(Dashboard.ServiceReference.Banner banner) {
            base.Channel.AddBanner(banner);
        }
        
        public System.Threading.Tasks.Task AddBannerAsync(Dashboard.ServiceReference.Banner banner) {
            return base.Channel.AddBannerAsync(banner);
        }
        
        public void DeleteBanner(int id) {
            base.Channel.DeleteBanner(id);
        }
        
        public System.Threading.Tasks.Task DeleteBannerAsync(int id) {
            return base.Channel.DeleteBannerAsync(id);
        }
        
        public System.Collections.Generic.List<Dashboard.ServiceReference.Image> GetImageByProductId(int id) {
            return base.Channel.GetImageByProductId(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Image>> GetImageByProductIdAsync(int id) {
            return base.Channel.GetImageByProductIdAsync(id);
        }
        
        public Dashboard.ServiceReference.Image GetImageById(int id) {
            return base.Channel.GetImageById(id);
        }
        
        public System.Threading.Tasks.Task<Dashboard.ServiceReference.Image> GetImageByIdAsync(int id) {
            return base.Channel.GetImageByIdAsync(id);
        }
        
        public void DeleteImage(int id) {
            base.Channel.DeleteImage(id);
        }
        
        public System.Threading.Tasks.Task DeleteImageAsync(int id) {
            return base.Channel.DeleteImageAsync(id);
        }
        
        public void AddImageRange(System.Collections.Generic.List<Dashboard.ServiceReference.Image> image) {
            base.Channel.AddImageRange(image);
        }
        
        public System.Threading.Tasks.Task AddImageRangeAsync(System.Collections.Generic.List<Dashboard.ServiceReference.Image> image) {
            return base.Channel.AddImageRangeAsync(image);
        }
        
        public System.Collections.Generic.List<Dashboard.ServiceReference.Feature> GetFeatureByProductId(int id) {
            return base.Channel.GetFeatureByProductId(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Dashboard.ServiceReference.Feature>> GetFeatureByProductIdAsync(int id) {
            return base.Channel.GetFeatureByProductIdAsync(id);
        }
    }
}
